#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb  5 10:39:21 2022

@author: luiza.maciel
"""
from edos import *
from math import radians,degrees,sin,cos,sqrt,log,exp
import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import solve_ivp,odeint
from constants import *
from ODEwiebe import ODEwiebe
from ODEkinects import ODEkinects
from ODEequilibrium import ODEequilibrium2D,ODEequilibrium1D
import time 

if __name__ == '__main__':

    V0=volume(teta0)
    T0=P0*10**-3*V0/(m_m*Rg)  
    Qa0=0
    Qp0=0
    W0=0
    
    x0=[P0,T0,Qa0,Qp0,W0] #condicoes iniciais
    print(x0)
    
    tk=np.linspace(teta0,tetaf,900)
    ti=tk[:find_nearest(tk,teta_comb)]
    tj=tk[find_nearest(tk,teta_comb):find_nearest(tk,teta_comb+delta_teta)]
    tf=tk[find_nearest(tk,teta_comb+delta_teta):]
#    
#    ti = np.linspace(teta0, teta_comb,100)
#    tj = np.linspace(teta_comb,teta_comb+delta_teta,100)
#    tf = np.linspace(teta_comb+delta_teta, tetaf,100)

#    tk[:100] = ti
#    tk[100:200] = tj
#    tk[200:] = tf
    
    dt = (tetaf - teta0)/900
    spark = 2000
    
   # compositions = np.zeros((len(tk),len(reactants_composition)))
    method = input ("metodo a utilizar [0 - wiebe | 1 - equilibrio | 2 - cinetica]: ")
    if method == "0":
        start = time.time()
        P,T,Qa,Qp,W,massFraction,k_eval = ODEwiebe(ti,tj,tf,tk,x0)
        print(time.time()-start)
    if method == "1":   
        start = time.time()
        P,T,Qa,Qp,W,k_eval,comps = ODEequilibrium2D(ti,tj,tf,tk,x0,reactants_composition,estimative,dt)
        print(time.time()-start)
    if method == "2":
        start = time.time()
        P,T,Qa,Qp,W,massFraction = ODEkinects(ti,tj,tf,tk,x0,spark,radians(-avanco),dt)    
        print(time.time()-start)
        
################################################################################
#----------------------------------EQUILIBRIO------------------------------------#
        
    #curvaa de pressao sem combustao
#    for l in range(len(tk)-1):
#        ts=[tk[l],tk[l+1]]
#        x=solve_ivp(motored,ts,x0,method='DOP853').y
#        
#        P1[l+1]=x[0][-1]
#        T1[l+1]=x[1][-1]
#        
#        x0=[x[0][-1],x[1][-1],x[2][-1],x[3][-1],x[4][-1]]
#    
#    x0=[P0,T0,Qa0,Qp0,W0]
#    #fechamento da valvula ao inicio da combustao
#    for i in range(len(ti)-1): #range(0,98)
#        ts=[ti[i],ti[i+1]]
#        x=solve_ivp(motor,ts,x0,args=(0,),method='DOP853').y
#        
#        P[i+1]=x[0][-1] #ultima linha,coluna1
#        T[i+1]=x[1][-1]
#        Qa[i+1]=x[2][-1]
#        Qp[i+1]=x[3][-1]
#        W[i+1]=x[4][-1]
#        
#        x0=[x[0][-1],x[1][-1],x[2][-1],x[3][-1],x[4][-1]]
#
#    next_composition=equilibrium(estimative,T[i+1],P[i+1]*9.869*10**-6)
#    composition0 = reactants_composition
#    massFraction.append(composition0[0])
#    
#    for j in range (len(ti)-1,len(ti)+len(tj)-1):
#        ts=[tk[j],tk[j+1]]
#    
#        x=solve_ivp(motorCombEquilibrium,ts,x0,args=(P1[j],composition0,next_composition,dt),method='DOP853').y
#        print(composition0,next_composition)
#        
#        P[j+1]=x[0][-1]
#        T[j+1]=x[1][-1]
#        Qa[j+1]=x[2][-1]
#        Qp[j+1]=x[3][-1]
#        W[j+1]=x[4][-1]
#        
#        composition0 = next_composition
#        estimative = composition0
#        
#        next_composition = equilibrium(estimative,T[j+1],P[j+1]*9.869*10**-6)
#        #print(next_composition)
#        massFraction.append(composition0[0])
#        
#        x0=[x[0][-1],x[1][-1],x[2][-1],x[3][-1],x[4][-1]]
#        
#    
#    for f in range(len(tj)+len(ti)-1,len(tk)-1): #200 ao 298
#        ts=[tk[f],tk[f+1]]
#        x=solve_ivp(motorCombEquilibrium,ts,x0,args=(P1[f],composition0,next_composition,dt),method='DOP853').y
#        
#        P[f+1]=x[0][-1]
#        T[f+1]=x[1][-1]
#        Qa[f+1]=x[2][-1]
#        Qp[f+1]=x[3][-1]
#        W[f+1]=x[4][-1]
#        
#        composition0 = next_composition
#        estimative = composition0
#        
#        next_composition = equilibrium(estimative,T[f+1],P[f+1]*9.869*10**-6)
#        massFraction.append(composition0[0])
#        
#        x0=[x[0][-1],x[1][-1],x[2][-1],x[3][-1],x[4][-1]]
        



################################################################################
#----------------------------GRAFICOS EQUILIBRIO-----------------------------#
    tkd=list(map(lambda x:degrees(x),tk))
    if method == "1":
        composicao_comb=comps[:,0]
        composicao_o2=comps[:,1]
        composicao_h2o=comps[:,2]
        composicao_co2=comps[:,3]
        composicao_co=comps[:,4]
        composicao_o=comps[:,5]
        composicao_n=comps[:,6]
        composicao_no2=comps[:,7]
        composicao_no=comps[:,8]
        composicao_oh=comps[:,9] 
        composicao_h2=comps[:,10]
        composicao_h=comps[:,11]
        composicao_n2=comps[:,12]
#    
    
        plt.figure(2,figsize=(10,8))
        ax = plt.axes()
        ax.set_xlabel('θ[°]',fontsize='x-large',loc='right')
        ax.set_ylabel('Fração molar',fontsize='x-large')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_comb[len(ti)-1:len(ti)+len(tj)],'k.-',label='combustível')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_o2[len(ti)-1:len(ti)+len(tj)],'ko-',label='O2')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_h2o[len(ti)-1:len(ti)+len(tj)],'kx-',label='H2O')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_co2[len(ti)-1:len(ti)+len(tj)],'ks-',label='CO2')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_co[len(ti)-1:len(ti)+len(tj)],'k^-',label='CO')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_n2[len(ti)-1:len(ti)+len(tj)],'k1-',label='N2')
        plt.legend()
        
        plt.figure(2,figsize=(10,8))
        ax = plt.axes()
        ax.set_xlabel('θ[°]',fontsize='x-large',loc='right')
        ax.set_ylabel('Fração molar',fontsize='x-large')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_oh[len(ti)-1:len(ti)+len(tj)],'k>-',label='OH')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_h2[len(ti)-1:len(ti)+len(tj)],'k<-',label='H2')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_h[len(ti)-1:len(ti)+len(tj)],'k.-',label='H')
    
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_n[len(ti)-1:len(ti)+len(tj)],'k.-',label='N')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_no2[len(ti)-1:len(ti)+len(tj)],'k*-',label='NO2')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_no[len(ti)-1:len(ti)+len(tj)],'k+-',label='NO')
        plt.legend()
        plt.savefig("instantanea")
#    fig2=plt.figure(figsize=(15,10))
#    
#    plot=fig2.add_subplot(3,4,1)
#    plot.plot(tkd,composicao_comb,'o')
#    plot.legend(['Combustível'])
#    
#    plot=fig2.add_subplot(3,4,2)
#    plot.plot(tkd,composicao_o2,'o')
#    plot.legend(['O2'])
#    
#    plot=fig2.add_subplot(3,4,3)
#    plot.plot(tkd,composicao_h2o,'o')
#    plot.legend(['H2O'])
#    
#    plot=fig2.add_subplot(3,4,4)
#    plot.plot(tkd,composicao_co2,'o')
#    plot.legend(['CO2'])
#    
#    plot=fig2.add_subplot(3,4,5)
#    plot.plot(tkd,composicao_co,'o')
#    plot.legend(['CO'])
#    
#    plot=fig2.add_subplot(3,4,6)
#    plot.plot(tkd,composicao_o,'o')
#    plot.legend(['O'])
#    
#    plot=fig2.add_subplot(3,4,7)
#    plot.plot(tkd,composicao_n,'o')
#    plot.legend(['N'])
#    
#    plot=fig2.add_subplot(3,4,8)
#    plot.plot(tkd,composicao_no2,'o')
#    plot.legend(['NO2'])
#    
#    plot=fig2.add_subplot(3,4,9)
#    plot.plot(tkd,composicao_no,'o')
#    plot.legend(['NO'])
#    
#    plot=fig2.add_subplot(3,4,10)
#    plot.plot(tkd,composicao_oh,'o')
#    plot.legend(['OH'])
#    
#    plot=fig2.add_subplot(3,4,11)
#    plot.plot(tkd,composicao_h2,'o')
#    plot.legend(['H2'])
#    
#    plot=fig2.add_subplot(3,4,12)
#    plot.plot(tkd,composicao_h,'o')
#    plot.legend(['H'])
#    
#    plt.show()
#    
    

###plots de graficos
    #print(P,T,Qa,Qp,W)
    print('\n'+'Pmax: '+ str(max(P)*10**-6)+' MPa' )
    print('Tmax: '+str(max(T))+' K' +str(degrees(tk[list(T).index(max(T))])))
    
    fig,(ax1,ax2)=plt.subplots(2,3)
    ax1[0].plot(tkd,P*10**(-6))
    ax1[1].plot(tkd,T)
   # ax1[2].plot(tkd[:],massFraction)
    ax2[0].plot(tkd,Qa)
    ax2[1].plot(tkd,Qp)
    ax2[2].plot(tkd,W)
    ax1[0].set_ylabel('P[MPa]')
    ax1[1].set_ylabel('T[K]')
    ax1[2].set_ylabel('X(teta)')
    ax2[0].set_ylabel('Qa[J]')
    ax2[1].set_ylabel('Qp[J]')
    ax2[2].set_ylabel('W[J]')
    plt.show()

#fracao massica
#wb = [wiebe(tet) for tet in tk[201:270]]
#ax=plt.axes()
#ax.set_ylabel('Mass Fraction Burned',fontsize='x-large')
#ax.set_xlabel('θ[°]',fontsize='x-large',loc='right')
#plt.plot(tkd[201:270],massFraction[200:269])
#plt.plot(tkd[201:270], wb)
    
#razao de calores
ax=plt.axes()
ax.set_ylabel('k',fontsize='x-large')
ax.set_xlabel('θ[°]',fontsize='x-large',loc='right')
k_evalEq = [1.3886844777098954, 1.3886782632687842, 1.3886719162182584, 1.3886654361749864, 1.388658822745315, 1.3886520755255507, 1.388645194101582, 1.38863817804888, 1.3886310269328488, 1.3886237403083832, 1.388616317719778, 1.3886087587012466, 1.3886010627762584, 1.3885932294579086, 1.3885852582488312, 1.3885771486407368, 1.3885689001151147, 1.388560512142704, 1.3885519841834681, 1.3885433156866198, 1.3885345060908212, 1.3885255548238304, 1.38851646130222, 1.3885072249323964, 1.3884978451091603, 1.3884883212166481, 1.3884786526279393, 1.38846883870511, 1.3884588787990981, 1.3884487722495173, 1.3884385183850882, 1.3884281165230956, 1.3884175659695195, 1.3884068660191051, 1.388396015955099, 1.3883850150493944, 1.388373862562374, 1.3883625577426812, 1.388351099827606, 1.3883394880429236, 1.3883277216021104, 1.388315799707553, 1.3883037215492537, 1.388291486305909, 1.3882790931437592, 1.388266541217389, 1.388253829669181, 1.3882409576295025, 1.388227924216567, 1.3882147285361346, 1.3882013696821909, 1.3881878467358053, 1.3881741587659304, 1.3881603048291822, 1.388146283969232, 1.3881320952175182, 1.388117737592717, 1.3881032101008408, 1.3880885117348671, 1.388073641475236, 1.3880585982893565, 1.3880433811313293, 1.3880279889429126, 1.3880124206520084, 1.387996675173866, 1.3879807514100029, 1.3879646482490702, 1.387948364565977, 1.3879318992223628, 1.3879152510662216, 1.3878984189320254, 1.3878814016403629, 1.3878641979984376, 1.3878468067992966, 1.3878292268221721, 1.3878114568323177, 1.3877934955810647, 1.3877753418054528, 1.3877569942284884, 1.3877384515587678, 1.3877197124905936, 1.387700775704029, 1.387681639864227, 1.38766230362204, 1.3876427656138794, 1.3876230244609993, 1.387603078770097, 1.387582927133067, 1.3875625681265862, 1.3875420003126384, 1.3875212222376576, 1.387500232433521, 1.3874790294162502, 1.387457611686845, 1.3874359777307335, 1.3874141260180142, 1.38739205500304, 1.387369763124504, 1.3873472488057952, 1.3873245104538614, 1.3873015464601879, 1.3872783552001386, 1.3872549350332586, 1.387231284302491, 1.387207401335133, 1.387183284441828, 1.3871589319172235, 1.3871343420390851, 1.3871095130690834, 1.3870844432520886, 1.3870591308164162, 1.3870335739734536, 1.387007770918206, 1.386981719828344, 1.3869554188648974, 1.3869288661714654, 1.386902059875083, 1.3868749980852595, 1.386847678894155, 1.3868201003770222, 1.3867922605912044, 1.3867641575770437, 1.3867357893570107, 1.3867071539360756, 1.3866782493015257, 1.3866490734228956, 1.3866196242517665, 1.3865898997223076, 1.3865598977499922, 1.386529616232981, 1.386499053050682, 1.3864682060650442, 1.386437073119399, 1.386405652038641, 1.3863739406296376, 1.3863419366809193, 1.3863096379621658, 1.3862770422249069, 1.386244147201957, 1.3862109506074223, 1.3861774501369752, 1.386143643467154, 1.3861095282560703, 1.3860751021429736, 1.3860403627479354, 1.3860053076722134, 1.3859699344983538, 1.3859342407894497, 1.385898224089897, 1.3858618819247162, 1.3858252117998506, 1.3857882112021036, 1.3857508775992204, 1.385713208439221, 1.3856752011512903, 1.3856368531449896, 1.3855981618107318, 1.3855591245196104, 1.3855197386229863, 1.3854800014532342, 1.385439910323033, 1.385399462525552, 1.3853586553347341, 1.3853174860049773, 1.385275951770963, 1.3852340498481284, 1.3851917774325648, 1.3851491317003473, 1.3851061098085529, 1.385062708894768, 1.3850189260766288, 1.3849747584529153, 1.384930203102456, 1.384885257085033, 1.3848399174408108, 1.3847941811907811, 1.3847480453362067, 1.384701506859295, 1.3846545627232134, 1.3846072098713686, 1.3845594452284378, 1.3845112656996084, 1.3844626681712078, 1.3844136495104635, 1.384364206565717, 1.38431433616614, 1.3842640351224955, 1.3842133002263615, 1.3841621282509022, 1.3841105159506804, 1.3840584600617425, 1.384005957301733, 1.3839530043698187, 1.3838995979474122, 1.3838457346973836, 1.3837914112649696, 1.383736624277465, 1.3836813703443585, 1.3836256460579668, 1.3835694479926675, 1.3835127727059942, 1.3834556167381575, 1.3833979766125482, 1.3833398488355664, 1.3832812298974189, 1.3832221162716436, 1.3831625044155382, 1.383102390770485, 1.3830417717622077, 1.382980643800738, 1.382919003280522, 1.38285684658123, 1.3827941700678206, 1.3827309700901076, 1.382667242983898, 1.3826029850710204, 1.382538192659243, 1.3824728620430848, 1.382406989503757, 1.382340571309495, 1.382273603716279, 1.382206082967607, 1.3821380052953123, 1.3820693669195783, 1.3820001640495119, 1.3819303928834714, 1.3818600496095115, 1.3817891304056877, 1.3817176314406352, 1.3816455488736954, 1.3815728788559005, 1.3814996175298613, 1.381425761030719, 1.38135130548621, 1.3812762470176991, 1.3812005817399973, 1.3811243057627562, 1.3810474151902157, 1.3809699061223695, 1.3808917746552813, 1.3808130168818853, 1.3807336288923175, 1.3806536067747561, 1.380572946616128, 1.3804916445028066, 1.3804096965211414, 1.3803270987584275, 1.3802438473034324, 1.380159938247428, 1.380075367684762, 1.379990131713741, 1.3799042264374792, 1.3798176479648205, 1.379730392411195, 1.3796424558996976, 1.379553834561558, 1.3794645245378172, 1.3793745219794884, 1.3792838230495807, 1.3791924239231232, 1.3791003207893313, 1.3790075098515198, 1.3789139873294123, 1.3788197494595438, 1.378724792496911, 1.3786291127158539, 1.3785327064118698, 1.3784355699023305, 1.3783376995281413, 1.378239091655482, 1.3781397426764865, 1.378039649011382, 1.3779388071098642, 1.3778372134522574, 1.377734864551631, 1.37763175695519, 1.3775278872460768, 1.3774232520450846, 1.3773178480122992, 1.3772116718492484, 1.377104720300532, 1.3769969901559183, 1.3768884782520248, 1.3767791814750276, 1.3766690967621278, 1.376558221103946, 1.3764465515468345, 1.3763340851949897, 1.3762208192130534, 1.3761067508282647, 1.3759918773329785, 1.375876196087467, 1.3757597045220675, 1.3756424001405048, 1.3755242805218912, 1.375405343324313, 1.3752855862870272, 1.3751650072341683, 1.3750436040773577, 1.3749213748185516, 1.374798317554271, 1.3746744304778304, 1.3745497118836194, 1.3744241601700558, 1.3742977738432591, 1.3741705515211167, 1.3740424919364997, 1.3739135939416904, 1.3737838565119898, 1.3736532787499942, 1.373521859889871, 1.3733895993014764, 1.3732564964949745, 1.3731225511252556, 1.3729877629966434, 1.3728521320678573, 1.3727156584565081, 1.372578342444743, 1.3724401844838825, 1.3723011851998514, 1.3721613453989785, 1.3720206660731749, 1.3718791484057355, 1.371736793777543, 1.371593603772438, 1.3714495801842586, 1.3713047250224368, 1.3711590405187208, 1.3710125291342603, 1.3708651935655654, 1.3707170367524482, 1.3705680618845046, 1.3704182724088134, 1.3702676720372289, 1.3701162647540959, 1.3699640548246783, 1.3698110468025284, 1.3696572455379714, 1.3695026561867283, 1.3693472842187115, 1.3691911354265738, 1.3690342159347093, 1.3688765322092478, 1.3687180910665524, 1.3685588996837441, 1.3683989656084856, 1.3682382967684652, 1.3680769014827163, 1.3679147884716902, 1.3677519668682696, 1.3675884462284884, 1.367424236543239, 1.367259348249673, 1.3670937922424893, 1.3669275798868128, 1.366760723029415, 1.3665932340119333, 1.366425125682768, 1.3662564114111944, 1.3660871050988368, 1.3659172211945463, 1.365746774707053, 1.3655757812191505, 1.3654042569014675, 1.3652322185271388, 1.3650596834857167, 1.364886669798219, 1.364713196131578, 1.3645392818141906, 1.3643649468505972, 1.3641902119370557, 1.3640150984775319, 1.3638396285981977, 1.3636638251646427, 1.3634877117969537, 1.3633113128858698, 1.363134653609046, 1.3629577599472087, 1.3627806587002904, 1.3626033775039075, 1.3624259448454652, 1.3622483900802094, 1.3620707434477968, 1.3618930360885921, 1.3617153000584636, 1.3615375683462805, 1.3613598748885423, 1.3611822545847636, 1.3610047433133308, 1.3608273779458735, 1.3606501963620399, 1.3604732374633464, 1.3602965411872614, 1.3601201485200718, 1.3599441015094558, 1.3597684432769048, 1.3595932180284178, 1.3594184710656227, 1.3592442487952041, 1.3590705987376481, 1.358897569535329, 1.3587252109594163, 1.3585535739149706, 1.3583827104464905, 1.3582126737397555, 1.3580435181247357, 1.3578752990753193, 1.3577080732079112, 1.3575418982789698, 1.3573768331797806, 1.3572129379300486, 1.357050273668991, 1.3568889026450186, 1.3567288882024426, 1.356570294766306, 1.3564131878248848, 1.3562576339090242, 1.3561037005700527, 1.3559514563532176, 1.3558009707700158, 1.3556523142664323, 1.3555055581885849, 1.3553607747447138, 1.3552180369651208, 1.3550774186572985, 1.354938994358385, 1.3548028392841656, 1.3546690292746124, 1.3545376407350842, 1.3544087505748292, 1.3542824361411447, 1.3541587751499107, 1.3540378456127815, 1.3539197257597548, 1.3538044939594451, 1.3536922286337087, 1.3535830081709823, 1.3534769108335052, 1.353374014663074, 1.353274397382777, 1.353178136294666, 1.3530853081755765, 1.3529959891690364, 1.3529102546747822, 1.3528281792357792, 1.3527498364227617, 1.3526752987163275, 1.3526046373882785, 1.3525379223801972, 1.352475222181408, 1.3524166037068268, 1.3523621321719228, 1.3523118709710813, 1.352265881552254, 1.3522242232960466, 1.3521869533926814, 1.3521541267230315, 1.3521257957391852, 1.3521020103495986, 1.3520828178055697, 1.3520682625917873, 1.3520583863198188, 1.3520532276266946, 1.3518572993939337, 1.3520064289485418, 1.3520631241032546, 1.3520279475331465, 1.3519018879790565, 1.3516856975635774, 1.3513805852382714, 1.3509882413026935, 1.350510603815733, 1.3499503322635689, 1.3493099354594669, 1.3485931510744447, 1.3478028527395014, 1.3469433287150716, 1.3459286693013173, 1.3449287739334375, 1.3439895194925546, 1.3428936716141688, 1.3416236771312955, 1.3404261647208457, 1.3396182384413469, 1.3383780098410514, 1.3371090698079262, 1.335813346088527, 1.3344954761303556, 1.3331600410319036, 1.3318132927674549, 1.3304530637970404, 1.329087549942071, 1.3277162591496627, 1.3263457532703888, 1.3249765505433453, 1.3236135321685383, 1.3222568171060682, 1.3209103479059106, 1.3195735158711566, 1.3182500717804655, 1.3169402026438246, 1.3156502876076461, 1.3143759812939813, 1.3131192253900668, 1.3118815943117832, 1.310664077509593, 1.3094695747952612, 1.308296424982314, 1.3071437713968597, 1.306012294373284, 1.3049038637059716, 1.3038198416456415, 1.3027576780643704, 1.3017179241188235, 1.3006991948808284, 1.2997047291347068, 1.2987339333099612, 1.2977845015891958, 1.296856517081076, 1.2959502888486967, 1.295064748654775, 1.2942026555154595, 1.2933607151365332, 1.292538930790177, 1.291737375996305, 1.2909549332396588, 1.2901932623793637, 1.2894505425154033, 1.2887257646836074, 1.2880198038250454, 1.287330831188291, 1.286659674508137, 1.2860062604713678, 1.2853702989089626, 1.2847496546385846, 1.2841448023930384, 1.2835560229061698, 1.2829821601869582, 1.2824235370085466, 1.281880287763694, 1.281349951811253, 1.2808343200697605, 1.2803316471523338, 1.2798415558330365, 1.2793658567226558, 1.278902262836959, 1.2784506560808664, 1.278011320101979, 1.2775834676384585, 1.2771668408335455, 1.276761511701652, 1.2763669279885543, 1.2759839634119574, 1.2756113172958616, 1.2752486700163024, 1.274895623586982, 1.2745498071214016, 1.2742159654517276, 1.2738910744100436, 1.2735752591932326, 1.2732683938269396, 1.2729695782589543, 1.2726790002179507, 1.2723974946674939, 1.2721236053848237, 1.271857549804114, 1.2715988997314551, 1.271347647421862, 1.2711038359094933, 1.2708677790111162, 1.2706382786370973, 1.2704154923382733, 1.270199739963243, 1.269990162930673, 1.2697879074152838, 1.2695920421490097, 1.2694054853555512, 1.2692219764629624, 1.269044006228702, 1.268871997751955, 1.268705325690612, 1.2690445697819674, 1.2688346526482048, 1.2686891762394694, 1.2685436080218924, 1.2684036834692507, 1.26826822991527, 1.2681384834444178, 1.2680125821942352, 1.267892134848185, 1.2677758213477994, 1.2676638511240477, 1.2675567108477352, 1.267453573004608, 1.267354459313518, 1.267259576245438, 1.2671686738671373, 1.2670818466139986, 1.2669988199701807, 1.2669196628736992, 1.2668441490997489, 1.2667720945615581, 1.2667037071259202, 1.266636773581928, 1.2665748301262219, 1.266516264653126, 1.266460953074986, 1.2664087554725376, 1.266359355724251, 1.2663134326699756, 1.266270108980565, 1.2662296271937215, 1.2661918645449264, 1.266156981993943, 1.2661253177509333, 1.2660945239172001, 1.2660671679421496, 1.26604261030044, 1.2660204402058806, 1.2660004495362442, 1.265983057033846, 1.2659682237423393, 1.2659553571072997, 1.2659443529562449, 1.2659360529405093, 1.2667779637676422, 1.2658527934389214, 1.2666216217210142, 1.265863494978684, 1.266566152647437, 1.2658750301705681, 1.2665172581864197, 1.2658930312132182, 1.2664801742232008, 1.2659166581316186, 1.266453646227128, 1.265946400367748, 1.2664377878109785, 1.2669114627800588, 1.265962428047384, 1.2663929465045851, 1.2668078398052909, 1.26603682777408, 1.2664150285621327, 1.2667795266066715, 1.2671308625340545, 1.2661312327190852, 1.2664507626193138, 1.2667588920591575, 1.267056105088701, 1.2673428723706273, 1.2662941602819635, 1.266555491711368, 1.2668078753130165, 1.2670517199666462, 1.2672874206664675, 1.2675153585731351, 1.2677359011062577, 1.2665653576809697, 1.2667672101164453, 1.2669628143982492, 1.2671524792351079, 1.2673365007089812, 1.267515162543233, 1.2676887363874054, 1.2678574821159494, 1.2680216481385052, 1.2681814717191067, 1.2683371793032252, 1.2684889868497635, 1.26717664242322, 1.267317335670543, 1.2674547926246915, 1.2675891872252851, 1.2677206847582383, 1.2678494421851842, 1.267975608468704, 1.2680993248920982, 1.2682207253741709, 1.2683399367768422, 1.2684570791961627, 1.2685722661547314, 1.2686856051066946, 1.2687971976460521, 1.2689071397378444, 1.2690155219803676, 1.2691224298592352, 1.2692279439930756, 1.2693321403699995, 1.2694350905766143, 1.269536862018242, 1.269637518130088, 1.269737118581352, 1.269835719470212, 1.2699333735114113, 1.270030130215732, 1.2701260360618547, 1.2702211346607117, 1.270315466912359, 1.2704090711561278, 1.270501983313741, 1.2705942370252288, 1.2706858637698502, 1.2707768929992944, 1.270867352266649, 1.2709572673260343, 1.2710466622385743, 1.271135559473376, 1.271223980002702, 1.2713119433929136, 1.2713994678897746, 1.2714865705001053, 1.2715732670681281, 1.271659572348459, 1.271745500074322, 1.271831063022758, 1.2719162730752136, 1.2720011412758336, 1.2720856778853487, 1.272169892432224, 1.2722537937616163, 1.272337390079657, 1.2724206889970229, 1.2725036975686437, 1.2725864223313414, 1.272668869339666, 1.2727510441984344, 1.272832952094669, 1.272914597826191, 1.272995985829176, 1.2730771202027606, 1.2700665850630288, 1.270644280537355, 1.2707212556877479, 1.270798009554695, 1.2708745447339984, 1.2709508636147178, 1.2710269683955435, 1.2711028610983135, 1.2711785435819911, 1.2712540175551241, 1.271329284587497, 1.2714043461209816, 1.2714792034796645, 1.2715538578791143, 1.2716283104356603, 1.2717025621737321, 1.2717766140338127, 1.271850466879715, 1.2719241215044284, 1.2719975786365663, 1.2720708389458206, 1.2721439030480326, 1.2722167715100443, 1.2722894448543545, 1.27236192356287, 1.2724342080806763, 1.2725062988197802, 1.2725781961620333, 1.2726499004621135, 1.27272141205028, 1.2727927312352185, 1.2728638583057772, 1.272934793533582, 1.2730055371744808, 1.273076089470809, 1.2731464506528383, 1.273216620940091, 1.2732866005432595, 1.2733563896646414, 1.2734259884999213, 1.2734953972394223, 1.2735646160680674, 1.2736336451673813, 1.2737024847152496, 1.2737711348877192, 1.2738395958586408, 1.2739078678007627, 1.2739759508865454, 1.274043845287805, 1.2741115511768597, 1.2741790687267995, 1.274246398111383, 1.2743135395059464, 1.2743804930874294, 1.2744472590343345, 1.2745138375273402, 1.2745802287493915, 1.274646432885866, 1.2747124501244358, 1.2747782806554748, 1.2748439246723415, 1.2749093823709385, 1.2749746539501308, 1.2750397396118012, 1.2751046395607024, 1.2751693540046782, 1.2752338831544967, 1.2752982272241897, 1.275362386430594, 1.275426360993697, 1.275490151136385, 1.2755537570848263, 1.2756171790677775, 1.275680417317195, 1.2757434720677772, 1.275806343557147, 1.2758690320257056, 1.275931537716798, 1.2759938608761257, 1.2760560017522606, 1.276117960596359, 1.2761797376620365, 1.2762413332055491, 1.2763027474851198, 1.2763639807618903, 1.2764250332988392, 1.2764859053614819, 1.2765465972170185, 1.2766071091351443, 1.2766674413874208, 1.2767275942472103, 1.2767875679899232, 1.2768473628925316, 1.2769069792339738, 1.2769664172945974, 1.2770256773564168, 1.277084759702932, 1.2771436646189098, 1.2772023923909013, 1.2772609433062168, 1.2773193176536866, 1.2773775157232352, 1.2774355378056448, 1.2774933841928982, 1.2775510551779288, 1.2776085510542265, 1.2776658721164365, 1.2777230186596447, 1.2777799909797676, 1.2778367893730536, 1.2778934141363347, 1.2779498655671069, 1.2780061439630759, 1.278062249621843, 1.278118182842046, 1.2781739439217692, 1.2782295331596523, 1.2782849508540521, 1.2783401973035469, 1.2783952728065333, 1.2784501776611255, 1.2785049121653527, 1.2785594766169295, 1.2786138713132242, 1.278668096551166, 1.278722152627262, 1.2787760398374335, 1.278829758477085, 1.278883308840805, 1.2789366912228097, 1.2789899059161938, 1.279042953213473, 1.2790958334059612, 1.2791485467845942, 1.279201093638583, 1.2792534742567037, 1.2793056889264713, 1.2793577379339611, 1.27940962156436, 1.2794613401014365, 1.2795128938277458, 1.279564283024342, 1.279615507970838, 1.2796665689455036, 1.2797174662250925, 1.279768200084502, 1.2798187707975728, 1.2798691786357095, 1.2799194238691802, 1.2799695067663122, 1.280019427593533, 1.2800691866154135, 1.2801187840947201, 1.2801682202921871, 1.2802174954663772, 1.280266609874261, 1.28031556377024, 1.2803643574067993, 1.2804129910341162, 1.2804614649002186, 1.280509779250886, 1.2805579343296791, 1.2806059303775492, 1.2806537676331362, 1.2807014463327668, 1.2807489667101999, 1.280796328996672, 1.2808435334208066]

ax.axvspan(tkd[130],tkd[len(ti)-1], alpha=0.5, color='blanchedalmond')
ax.axvspan(tkd[len(ti)-1],tkd[len(ti)+len(tj)-1],tkd[len(ti)-1], alpha=0.5, color='navajowhite')
ax.axvspan(tkd[len(ti)+len(tj)-1],tkd[-30], alpha=0.5, color='tan')
plt.plot(tkd[130:len(ti)-1],k_evalEq[130:len(ti)-1],color='black')
plt.plot(tkd[len(ti)-1:len(ti)+len(tj)-1],k_evalEq[len(ti)-1:len(ti)+len(tj)-1],color='black',label='Composição de Equilíbrio')
plt.plot(tkd[len(ti)+len(tj)-1:-30],k_evalEq[len(ti)+len(tj)-1:-29],color='black')
plt.plot(tkd[130:len(ti)-1],k_eval[130:len(ti)-1],color='black',linestyle="dashdot")
plt.plot(tkd[len(ti)-1:len(ti)+len(tj)-1],k_eval[len(ti)-1:len(ti)+len(tj)-1],color='black',linestyle="dashdot",label='Linear')
plt.plot(tkd[len(ti)+len(tj)-1:-30],k_eval[len(ti)+len(tj)-1:-29],color='black',linestyle="dashdot")
plt.axvline(tkd[len(ti)-1],color='black',linestyle='dashed')
plt.axvline(tkd[len(ti)+len(tj)-1],color='black',linestyle='dashed')
plt.legend()
plt.savefig("ksEq")


path='./dados.txt'
with open(path,'w') as f:
    f.write("Temperatures:\n")
    for d in range(len(T)):
        f.write(str(T[d])+',')
    f.write("\n Pressures:\n")
    for d in range(len(P)):
        f.write(str(P[d])+',')
    f.close()