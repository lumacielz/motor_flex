#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb  5 10:39:21 2022

@author: luiza.maciel
"""
from edos import *
from math import radians,degrees,sin,cos,sqrt,log,exp
import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import solve_ivp,odeint
from constants import *
from ODEwiebe import ODEwiebe
from ODEkinects import ODEkinects
from ODEequilibrium import ODEequilibrium2D,ODEequilibrium1D
import time 

if __name__ == '__main__':

    V0=volume(teta0)
    T0=P0*10**-3*V0/(m_m*Rg)  
    Qa0=0
    Qp0=0
    W0=0
    
    x0=[P0,T0,Qa0,Qp0,W0] #condicoes iniciais
    print(x0)
    
    tk=np.linspace(teta0,tetaf,600)
    ti=tk[:find_nearest(tk,teta_comb)]
    tj=tk[find_nearest(tk,teta_comb):find_nearest(tk,teta_comb+delta_teta)]
    tf=tk[find_nearest(tk,teta_comb+delta_teta):]
#    
#    ti = np.linspace(teta0, teta_comb,100)
#    tj = np.linspace(teta_comb,teta_comb+delta_teta,100)
#    tf = np.linspace(teta_comb+delta_teta, tetaf,100)

#    tk[:100] = ti
#    tk[100:200] = tj
#    tk[200:] = tf
    
    dt = (tetaf - teta0)/600
    spark = 2000
    
   # compositions = np.zeros((len(tk),len(reactants_composition)))
    method = input ("metodo a utilizar [0 - wiebe | 1 - equilibrio | 2 - cinetica]: ")
    if method == "0":
        start = time.time()
        P,T,Qa,Qp,W,massFraction,k_eval = ODEwiebe(ti,tj,tf,tk,x0)
        print(time.time()-start)
    if method == "1":   
        start = time.time()
        P,T,Qa,Qp,W,k_eval,comps = ODEequilibrium2D(ti,tj,tf,tk,x0,reactants_composition,estimative,dt)
        print(time.time()-start)
    if method == "2":
        start = time.time()
        P,T,Qa,Qp,W,massFraction = ODEkinects(ti,tj,tf,tk,x0,spark,radians(-avanco),dt)    
        print(time.time()-start)
        

################################################################################
#----------------------------GRAFICOS EQUILIBRIO-----------------------------#
    tkd=list(map(lambda x:degrees(x),tk))
    if method == "1":
        composicao_comb=comps[:,0]
        composicao_o2=comps[:,1]
        composicao_h2o=comps[:,2]
        composicao_co2=comps[:,3]
        composicao_co=comps[:,4]
        composicao_o=comps[:,5]
        composicao_n=comps[:,6]
        composicao_no2=comps[:,7]
        composicao_no=comps[:,8]
        composicao_oh=comps[:,9] 
        composicao_h2=comps[:,10]
        composicao_h=comps[:,11]
        composicao_n2=comps[:,12]
#    
    
        plt.figure(2,figsize=(10,8))
        ax = plt.axes()
        ax.set_xlabel('θ[°]',fontsize='x-large',loc='right')
        ax.set_ylabel('Fração molar',fontsize='x-large')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_comb[len(ti)-1:len(ti)+len(tj)],'k.-',label='combustível')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_o2[len(ti)-1:len(ti)+len(tj)],'ko-',label='O2')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_h2o[len(ti)-1:len(ti)+len(tj)],'kx-',label='H2O')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_co2[len(ti)-1:len(ti)+len(tj)],'ks-',label='CO2')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_co[len(ti)-1:len(ti)+len(tj)],'k^-',label='CO')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_n2[len(ti)-1:len(ti)+len(tj)],'k1-',label='N2')
        plt.legend()
        
        plt.figure(2,figsize=(10,8))
        ax = plt.axes()
        ax.set_xlabel('θ[°]',fontsize='x-large',loc='right')
        ax.set_ylabel('Fração molar',fontsize='x-large')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_oh[len(ti)-1:len(ti)+len(tj)],'k>-',label='OH')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_h2[len(ti)-1:len(ti)+len(tj)],'k<-',label='H2')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_h[len(ti)-1:len(ti)+len(tj)],'k.-',label='H')
    
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_n[len(ti)-1:len(ti)+len(tj)],'k.-',label='N')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_no2[len(ti)-1:len(ti)+len(tj)],'k*-',label='NO2')
        plt.plot(tkd[len(ti)-1:len(ti)+len(tj)],composicao_no[len(ti)-1:len(ti)+len(tj)],'k+-',label='NO')
        plt.legend()
        plt.savefig("instantanea")
#    fig2=plt.figure(figsize=(15,10))
#    
#    plot=fig2.add_subplot(3,4,1)
#    plot.plot(tkd,composicao_comb,'o')
#    plot.legend(['Combustível'])
#    
#    plot=fig2.add_subplot(3,4,2)
#    plot.plot(tkd,composicao_o2,'o')
#    plot.legend(['O2'])
#    
#    plot=fig2.add_subplot(3,4,3)
#    plot.plot(tkd,composicao_h2o,'o')
#    plot.legend(['H2O'])
#    
#    plot=fig2.add_subplot(3,4,4)
#    plot.plot(tkd,composicao_co2,'o')
#    plot.legend(['CO2'])
#    
#    plot=fig2.add_subplot(3,4,5)
#    plot.plot(tkd,composicao_co,'o')
#    plot.legend(['CO'])
#    
#    plot=fig2.add_subplot(3,4,6)
#    plot.plot(tkd,composicao_o,'o')
#    plot.legend(['O'])
#    
#    plot=fig2.add_subplot(3,4,7)
#    plot.plot(tkd,composicao_n,'o')
#    plot.legend(['N'])
#    
#    plot=fig2.add_subplot(3,4,8)
#    plot.plot(tkd,composicao_no2,'o')
#    plot.legend(['NO2'])
#    
#    plot=fig2.add_subplot(3,4,9)
#    plot.plot(tkd,composicao_no,'o')
#    plot.legend(['NO'])
#    
#    plot=fig2.add_subplot(3,4,10)
#    plot.plot(tkd,composicao_oh,'o')
#    plot.legend(['OH'])
#    
#    plot=fig2.add_subplot(3,4,11)
#    plot.plot(tkd,composicao_h2,'o')
#    plot.legend(['H2'])
#    
#    plot=fig2.add_subplot(3,4,12)
#    plot.plot(tkd,composicao_h,'o')
#    plot.legend(['H'])
#    
#    plt.show()
#    
    

###plots de graficos
    #print(P,T,Qa,Qp,W)
    print('\n'+'Pmax: '+ str(max(P)*10**-6)+' MPa' )
    print('Tmax: '+str(max(T))+' K' +str(degrees(tk[list(T).index(max(T))])))
    
    fig,(ax1,ax2)=plt.subplots(2,3)
    ax1[0].plot(tkd,P*10**(-6))
    ax1[1].plot(tkd,T)
   # ax1[2].plot(tkd[:],massFraction)
    ax2[0].plot(tkd,Qa)
    ax2[1].plot(tkd,Qp)
    ax2[2].plot(tkd,W)
    ax1[0].set_ylabel('P[MPa]')
    ax1[1].set_ylabel('T[K]')
    ax1[2].set_ylabel('X(teta)')
    ax2[0].set_ylabel('Qa[J]')
    ax2[1].set_ylabel('Qp[J]')
    ax2[2].set_ylabel('W[J]')
    plt.show()

#fracao massica
#wb = [wiebe(tet) for tet in tk[201:270]]
#ax=plt.axes()
#ax.set_ylabel('Mass Fraction Burned',fontsize='x-large')
#ax.set_xlabel('θ[°]',fontsize='x-large',loc='right')
#plt.plot(tkd[201:270],massFraction[200:269])
#plt.plot(tkd[201:270], wb)
    
#razao de calores
ax=plt.axes()
ax.set_ylabel('k',fontsize='x-large')
ax.set_xlabel('θ[°]',fontsize='x-large',loc='right')
k_evalEq = [1.3886844777098954, 1.3886702884935729, 1.3886554236064776, 1.3886398784439349, 1.3886236481356902, 1.3886067275440075, 1.3885891112624842, 1.3885707936136633, 1.3885517686472166, 1.3885320301374604, 1.3885115715815646, 1.3884903861964846, 1.3884684669175495, 1.388445806394721, 1.388422396990903, 1.3883982307786835, 1.3883732995374345, 1.3883475947510089, 1.388321107603676, 1.388293828977962, 1.388265749450728, 1.3882368592907044, 1.3882071484538945, 1.3881766065814447, 1.3881452229950533, 1.3881129866939466, 1.3880798863507597, 1.388045910308322, 1.38801104657527, 1.387975282822305, 1.3879386063782726, 1.3879010042261093, 1.3878624629987986, 1.3878229689751107, 1.3877825080750854, 1.387741065856656, 1.3876986275102436, 1.3876551778554846, 1.3876107013356578, 1.3875651820144355, 1.3875186035706233, 1.38747094929406, 1.3874222020809956, 1.3873723444296169, 1.3873213584355726, 1.3872692257872854, 1.387215927761631, 1.3871614452193504, 1.3871057586006885, 1.3870488479204108, 1.3869906927642122, 1.3869312722836056, 1.3868705651918094, 1.3868085497594151, 1.386745203810226, 1.3866805047171433, 1.3866144293975602, 1.3865469543101911, 1.3864780554503615, 1.3864077083466833, 1.3863358880573255, 1.386262569166131, 1.3861877257797581, 1.3861113315237708, 1.3860333595404448, 1.3859537824847057, 1.385872572522453, 1.385789701327483, 1.3857051400795852, 1.3856188594620713, 1.3855308296605047, 1.3854410203606609, 1.3853494007482028, 1.3852559395066857, 1.385160604817815, 1.3850633643610544, 1.3849641853138122, 1.384863034351894, 1.384759877650931, 1.3846546808873013, 1.3845474092405674, 1.3844380273958394, 1.3843264995465567, 1.384212789398391, 1.3840968601735026, 1.383978674614777, 1.383858194992214, 1.3837353831084531, 1.3836102003060133, 1.3834826074753854, 1.3833525650634206, 1.3832200330824709, 1.3830849711219328, 1.3829473383586248, 1.3828070935704322, 1.3826641951488763, 1.3825186011152288, 1.38237026913533, 1.3822191565383797, 1.3820652203349852, 1.381908417237435, 1.3817487036824603, 1.3815860358540735, 1.3814203697091045, 1.3812516610046879, 1.3810798653272824, 1.3809049381239882, 1.38072683473585, 1.3805455104342457, 1.3803609204586422, 1.3801730200576992, 1.3799817645333943, 1.379787109286844, 1.3795890098691217, 1.379387422033505, 1.3791823017925657, 1.378973605478199, 1.3787612898064086, 1.3785453119447013, 1.3783256295861128, 1.3781022010258759, 1.377874985244352, 1.3776439419946849, 1.3774090318961614, 1.3771702165334818, 1.376927458562332, 1.3766807218216226, 1.3764299714528048, 1.3761751740265444, 1.3759162976776609, 1.3756533122477812, 1.3753861894381492, 1.3751149029698042, 1.3748394287565644, 1.3745597450857852, 1.3742758328123483, 1.3739876755635414, 1.373695259956459, 1.3733985758291978, 1.373097616485588, 1.3727923789545433, 1.3724828642663158, 1.3721690777427837, 1.3718510293074384, 1.3715287338122213, 1.3712022113844988, 1.3708714877924404, 1.3705365948335928, 1.3701975707442782, 1.3698544606323297, 1.3695073169334544, 1.369156199893614, 1.3688011780766365, 1.3684423288984902, 1.3680797391904007, 1.3677135057890788, 1.367343736157083, 1.3669705490330992, 1.3665940751111392, 1.3662144577512279, 1.3658318537200356, 1.3654464339609003, 1.3650583843938429, 1.364667906742873, 1.364275219390685, 1.363880558256999, 1.363484177699152, 1.3630863514302776, 1.3626873734522724, 1.3622875589961205, 1.3618872454657194, 1.3614867933753918, 1.3610865872743574, 1.3606870366461374, 1.3602885767723563, 1.3598916695463525, 1.359496804222878, 1.3591044980837954, 1.3587152970043228, 1.3583297758950352, 1.3579485389976929, 1.3575722200107407, 1.3572014820143488, 1.356837017168888, 1.3564795461544426, 1.3561298173212395, 1.355788605517522, 1.3554567105653366, 1.3551349553508705, 1.3548241835022803, 1.354525256628303, 1.3542390510955713, 1.3539664543289152, 1.3537083606261584, 1.3534656664852047, 1.3532392654539815, 1.3530300425239488, 1.352838868100227, 1.3526665915948506, 1.3525140347063034, 1.352381984457741, 1.3522711860872318, 1.3521823358891156, 1.3521160741229625, 1.3520729781123797, 1.351959731192098, 1.3520324104595867, 1.3520798583441913, 1.3521033742732869, 1.3520998281731034, 1.3520617349181867, 1.3519774354953513, 1.3518314028396723, 1.3516047044845911, 1.3512756105662203, 1.3508253298384907, 1.3502274407388297, 1.3494582853228965, 1.3484957853589226, 1.3473209665873278, 1.3459192992882079, 1.3442820094738526, 1.3424071092856493, 1.3402998826926884, 1.3379730953346625, 1.3354467093958622, 1.3327467143443026, 1.3299039032821605, 1.3269518986480289, 1.3239257757849747, 1.3208604832244002, 1.3177890908528274, 1.314742036348283, 1.3117466146675534, 1.3088257909251992, 1.3059989418444269, 1.303281169203398, 1.3006842245542223, 1.2982162594791715, 1.2958825777097043, 1.2936857811407705, 1.2916413696745792, 1.2897320970148682, 1.2879551604069117, 1.2863068479385606, 1.2847824349901913, 1.2833766393743478, 1.2820838795200251, 1.2808982018649802, 1.2798136108790774, 1.2788241979977857, 1.2779240836768015, 1.2771075520641686, 1.2763691057869977, 1.276510836399686, 1.2766466138305756, 1.2767764061401699, 1.2769023415888279, 1.2770243386822735, 1.2771359364242576, 1.277243548981279, 1.2773471314435472, 1.2774466495520527, 1.2775420790433685, 1.2776334050124005, 1.2777206212954104, 1.277803729872267, 1.2778827402909647, 1.2779576691140988, 1.2780285393867739, 1.2780953801278083, 1.2781582287645485, 1.278217132089405, 1.278247766105883, 1.2782749193293748, 1.2782986429571275, 1.2783189913205009, 1.2783360215342003, 1.2783497931674066, 1.278360367934895, 1.2783678094083248, 1.278372182745269, 1.2783735544382946, 1.2783719920789263, 1.2783675641402015, 1.2783603397738634, 1.2783503886222685, 1.2783377806459553, 1.2783225859621705, 1.2783048746986772, 1.2782847168582916, 1.2782621821946256, 1.2782373400988714, 1.2782102594969729, 1.2781810087559322, 1.2781496555986354, 1.2781162670278545, 1.278080909257139, 1.278043647650103, 1.278004546665207, 1.2779636698081387, 1.277921079589223, 1.2778768374868446, 1.2778310039154297, 1.2777836381996641, 1.2777347985505219, 1.27768454204818, 1.2776329246263631, 1.2775800010617402, 1.2775258249654424, 1.2774704487787525, 1.2774139237695126, 1.2773563000331398, 1.2772976264945308, 1.2772379509120249, 1.277177319884176, 1.2771157788568348, 1.2770533721330521, 1.2769901428832848, 1.2769261331576416, 1.2768613838983558, 1.276795934954111, 1.2767298250946864, 1.2766630920258635, 1.2765957724065067, 1.276527901864461, 1.2764595150136702, 1.2763906454723193, 1.2763213258798771, 1.2762515880251983, 1.2761814659917126, 1.2761109911539212, 1.2760401923632227, 1.2759690975823719, 1.2758977339033324, 1.2758261275665768, 1.275754303979397, 1.2756822877343317, 1.2756101026277908, 1.275537771678075, 1.2754653171432033, 1.2753927605392292, 1.2753201226573807, 1.2752474235816682, 1.27517468270579, 1.275101918750206, 1.275029149778684, 1.274956393214246, 1.2748836658558962, 1.2748109838938237, 1.2747383629249027, 1.2746658179681312, 1.2745933634791686, 1.2745210133651894, 1.2744487809989555, 1.2743766792329347, 1.2743047204126154, 1.2742329163904278, 1.274161278538358, 1.274089817761174, 1.2740185445082186, 1.2739474687865036, 1.2738766001720807, 1.2738059478216732, 1.2737355204843572, 1.2736653265127986, 1.2735953738732335, 1.2735256701568023, 1.2734562225902006, 1.2733870380446886, 1.273318123046693, 1.273249483787202, 1.2731811280676473, 1.2731130643209676, 1.2730452976923914, 1.272977832999332, 1.2729106747705123, 1.272843827254348, 1.2727772944264626, 1.2727110799980141, 1.272645187422865, 1.2725796199052062, 1.2725143804066312, 1.2724494716532297, 1.2723848961423738, 1.272320656149447, 1.2722567537340033, 1.2721931907466795, 1.2721299688349519, 1.272067089448631, 1.2720045538466929, 1.2719423631024172, 1.2718805181087784, 1.2718190195838222, 1.271757868076345, 1.2716970639704486, 1.271636607490819, 1.271576498707177, 1.2715167375392784]

ax.axvspan(tkd[130],tkd[len(ti)-1], alpha=0.5, color='blanchedalmond')
ax.axvspan(tkd[len(ti)-1],tkd[len(ti)+len(tj)-1],tkd[len(ti)-1], alpha=0.5, color='navajowhite')
ax.axvspan(tkd[len(ti)+len(tj)-1],tkd[-30], alpha=0.5, color='tan')
plt.plot(tkd[130:len(ti)-1],k_evalEq[130:len(ti)-1],color='black')
plt.plot(tkd[len(ti)-1:len(ti)+len(tj)-1],k_evalEq[len(ti)-1:len(ti)+len(tj)-1],color='black',label='Composição de Equilíbrio')
plt.plot(tkd[len(ti)+len(tj)-1:-30],k_evalEq[len(ti)+len(tj)-1:-29],color='black')
plt.plot(tkd[130:len(ti)-1],k_eval[130:len(ti)-1],color='black',linestyle="dashdot")
plt.plot(tkd[len(ti)-1:len(ti)+len(tj)-1],k_eval[len(ti)-1:len(ti)+len(tj)-1],color='black',linestyle="dashdot",label='Linear')
plt.plot(tkd[len(ti)+len(tj)-1:-30],k_eval[len(ti)+len(tj)-1:-29],color='black',linestyle="dashdot")
plt.axvline(tkd[len(ti)-1],color='black',linestyle='dashed')
plt.axvline(tkd[len(ti)+len(tj)-1],color='black',linestyle='dashed')
plt.legend()
plt.savefig("ksEq")


path='./dados.txt'
with open(path,'w') as f:
    f.write("Temperatures:\n")
    for d in range(len(T)):
        f.write(str(T[d])+',')
    f.write("\n Pressures:\n")
    for d in range(len(P)):
        f.write(str(P[d])+',')
    f.close()